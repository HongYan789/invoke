// indexHTML 首页HTML模板
const indexHTML = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dubbo Invoke Web UI</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: white;
            min-height: 100vh; padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
            overflow: hidden;
            width: calc(100% - 40px);
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; font-weight: 300; }
        .header p { font-size: 1.1em; opacity: 0.9; }
        /* 布局样式 - 211阵型 */
        .main-content { 
            display: flex; 
            flex-direction: column;
            gap: 20px; 
            padding: 20px;
            min-height: calc(100vh - 200px);
        }
        
        .top-row {
            display: flex;
            gap: 20px;
            flex: 1;
        }
        
        /* 左列：服务调用面板 */
        .left-column {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        /* 右列：可用服务和历史记录 */
        .right-column {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .service-call-panel { 
            flex: 1;
            min-height: 500px;
        }
        .available-services-panel { 
            flex: 1;
            min-height: 300px;
        }
        .history-panel { 
            flex: 1;
            min-height: 300px;
            overflow: hidden;
            max-width: 100%;
            contain: layout;
        }
        /* 调用结果面板独立显示在底部 */
        .result-panel { 
            min-height: 200px;
            flex-shrink: 0;
        }
        .panel h2 { 
            color: #333; 
            margin-bottom: 15px; 
            font-size: 1.1em; 
            font-weight: 400; 
            text-align: left;
            border-bottom: none;
            padding-left: 5px;
            display: flex;
            align-items: center;
        }
        .panel h2::before {
            margin-right: 8px;
            font-size: 1.1em;
        }
        .service-call-panel h2::before {
            content: '🔧'; /* 工具图标 - 服务调用 */
        }
        .available-services-panel h2::before {
            content: '📋'; /* 列表图标 - 可用服务 */
        }
        .history-panel h2::before {
            content: '📜'; /* 卷轴图标 - 调用历史 */
        }
        .result-panel h2::before {
            content: '📊'; /* 图表图标 - 调用结果 */
        }
        /* 表单样式调整 */
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            font-size: 13px;
            font-weight: normal;
        }
        input, select, textarea {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            font-size: 13px;
            background-color: #fff;
        }
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #4a90e2;
        }
        textarea {
            resize: vertical;
            min-height: 80px;
            font-family: monospace;
        }
        .btn {
            background: #4a90e2;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 400;
            transition: background 0.2s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        .btn:hover {
            background: #3a7dca;
        }
        .btn-secondary {
            background: #6c6fe2;
        }
        .btn-secondary:hover {
            background: #5a5dca;
        }
        .btn-success {
            background: #4caf50;
        }
        .btn-success:hover {
            background: #43a047;
        }
        .panel { 
            background: #fff; 
            border-radius: 8px; 
            padding: 20px; 
            border: 1px solid #e1e5e9;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
        }
        .panel:hover {
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            transform: translateY(-2px);
            transition: all 0.3s ease;
        }
        .result {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 16px;
            font-family: monospace;
            font-size: 13px;
            white-space: pre-wrap;
            min-height: 150px;
            max-height: 400px;
            overflow-y: auto;
            word-wrap: break-word;
            word-break: break-all;
            overflow-wrap: break-word;
            max-width: 100%;
            overflow-x: auto;
        }
        .success {
            border-color: #4caf50;
            background-color: #f1f8e9;
        }
        .error {
            border-color: #ff5252;
            background-color: #ffebee;
            color: #d32f2f;
        }
        .loading { 
            display: none; 
            text-align: center; 
            padding: 25px; 
            color: #5c6bc0; 
            font-weight: 500;
            background-color: rgba(92, 107, 192, 0.05);
            border-radius: 8px;
        }
        .spinner {
            border: 3px solid rgba(92, 107, 192, 0.1); border-top: 3px solid #5c6bc0;
            border-radius: 50%; width: 30px; height: 30px;
            animation: spin 1s linear infinite; margin: 0 auto 10px;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .service-list {
            flex: 1;
            min-height: 150px;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #e0e0e0;
            border-radius: 3px;
            background: white;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        .service-item {
            padding: 12px 16px; border-bottom: 1px solid #e9ecef;
            cursor: pointer; transition: all 0.2s ease;
            word-wrap: break-word; /* 确保长服务名能够换行 */
            overflow-wrap: break-word;
            white-space: normal;
            position: relative;
            max-width: 100%;
            min-width: 0;
            flex-shrink: 1;
            overflow: hidden;
        }
        .service-item .service-name {
            font-weight: 500; 
            color: #3949ab;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }
        .service-item .service-name:hover {
            white-space: normal;
            word-wrap: break-word;
        }
        .history-list {
            overflow-y: auto;
            overflow-x: hidden;
            max-height: 280px;
            scrollbar-width: thin;
            scrollbar-color: #c1c1c1 #f1f1f1;
            word-wrap: break-word;
            overflow-wrap: break-word;
            max-width: 100%;
            width: 100%;
            min-width: 0;
            flex-shrink: 1;
        }
        .history-list::-webkit-scrollbar {
            width: 6px;
        }
        .history-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        .history-list::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        .history-list::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        .service-item::after {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 0;
            background-color: rgba(92, 107, 192, 0.1);
            transition: width 0.2s ease;
        }
        .service-item:hover { background-color: #f5f7ff; }
        .service-item:hover::after { width: 4px; }
        .service-item:last-child { border-bottom: none; }
        .config-info {
            background: #e8eaf6; border: 1px solid #c5cae9; border-radius: 8px;
            padding: 16px; margin-bottom: 20px; font-size: 13px;
        }
        .config-info strong { color: #3949ab; }
        /* 表单布局 */
        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        .form-col {
            flex: 1;
        }
        .form-col .form-group:last-child {
            margin-bottom: 0;
        }
        /* 按钮组样式 */
        .btn-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: auto;
            padding-top: 10px;
        }
        .btn-group .btn {
            margin: 0;
        }
        @media (max-width: 768px) {
            .main-content { 
                flex-direction: column;
                gap: 16px; 
                padding: 16px; 
            }
            .first-row {
                flex-direction: column;
                gap: 16px;
            }
            .service-call-panel,
            .available-services-panel,
            .history-panel,
            .result-panel {
                width: 100%;
                flex: none;
                margin-top: 0;
                min-height: auto;
            }
            .header h1 { font-size: 2em; }
            .container { width: calc(100% - 20px); margin: 10px auto; }
            .header { padding: 20px; }
        }
        @media (max-width: 480px) {
            .container { width: calc(100% - 10px); margin: 5px auto; }
            .main-content { padding: 15px; gap: 15px; }
            .panel { padding: 15px; }
            .header { padding: 15px; }
            .header h1 { font-size: 1.8em; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Dubbo Invoke Web UI</h1>
            <p>图形化界面进行Dubbo服务调用</p>
        </div>
        <div class="main-content">
            <div class="top-row">
                <!-- 左列：服务调用面板 -->
                <div class="left-column">
                    <div class="panel service-call-panel">
                        <h2>服务调用</h2>

                        <div class="form-group">
                            <label for="callFormat">调用格式:</label>
                            <select id="callFormat" onchange="toggleCallFormat()">
                                <option value="traditional">传统格式 (服务名 + 方法名)</option>
                                <option value="expression">表达式格式 (service.method(params))</option>
                            </select>
                        </div>
                        <div id="traditionalFormat">
                            <div class="form-group">
                                <label for="registry">注册中心:</label>
                                <div style="display: flex; gap: 10px; align-items: center;">
                                    <input type="text" id="registry" value="{{.Registry}}" style="flex: 1;">
                                    <button class="btn btn-secondary" onclick="testConnection()" style="margin: 0; white-space: nowrap;">🔗 测试连接</button>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-col">
                                    <div class="form-group">
                                        <label for="serviceName">服务名:</label>
                                        <input type="text" id="serviceName" placeholder="com.example.UserService" value="com.example.UserService">
                                    </div>
                                </div>
                                <div class="form-col">
                                    <div class="form-group">
                                        <label for="methodName">方法名:</label>
                                        <input type="text" id="methodName" placeholder="getUserById" value="getUserById">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="parameters">参数 (JSON数组格式):</label>
                                <textarea id="parameters" placeholder='[123, "张三", true]'>[123]</textarea>
                            </div>
                        </div>
                        <div id="expressionFormat" style="display: none;">
                            <div class="form-group">
                                <label for="registry">注册中心:</label>
                                <div style="display: flex; gap: 10px; align-items: center;">
                                    <input type="text" id="registryExpr" value="{{.Registry}}" style="flex: 1;">
                                    <button class="btn btn-secondary" onclick="testConnection()" style="margin: 0; white-space: nowrap;">🔗 测试连接</button>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="expression">调用表达式: <span style="font-size: 0.8em; color: #5c6bc0;">(service.method(params))</span></label>
                                <textarea id="expression" placeholder='com.example.UserService.getUserById(123)'>com.example.UserService.getUserById(123)</textarea>
                            </div>
                        </div>
                        <div id="traditionalTypes" class="form-group">
                            <label for="types">参数类型 (可选，逗号分隔):</label>
                            <input type="text" id="types" placeholder="java.lang.Long,java.lang.String">
                        </div>
                        <div class="btn-group">
                            <button class="btn" onclick="invokeService()">🚀 调用服务</button>
                            <button class="btn btn-secondary" onclick="generateExample()">📝 生成示例</button>
                            <button class="btn btn-success" onclick="loadServices()">📋 加载服务列表</button>
                        </div>
                    </div>
                </div>
                
                <!-- 右列：可用服务和历史记录 -->
                <div class="right-column">
                    <div class="panel available-services-panel">
                        <h2>可用服务</h2>
                        <div id="serviceList" class="service-list">
                            <div style="padding: 20px; text-align: center; color: #6c757d;">
                                <p>请先连接注册中心</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="panel history-panel">
                        <h2>最近调用历史</h2>
                        <div id="historyList" class="service-list history-list">
                            <div style="padding: 20px; text-align: center; color: #6c757d;">
                                <p>暂无调用历史</p>
                            </div>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-secondary" onclick="downloadHistory()">下载日志</button>
                            <button class="btn btn-secondary" onclick="clearHistory()" style="background: #dc3545;">清空日志</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 调用结果面板独立显示在底部 -->
            <div class="panel result-panel">
                <h2>调用结果</h2>
                <div id="loading" class="loading">
                    <div class="spinner"></div>
                    正在调用服务...
                </div>
                <div id="result" class="result" style="display: none;"></div>
            </div>
        </div>
    </div>
    <script>
        function toggleCallFormat() {
            const format = document.getElementById('callFormat').value;
            const traditional = document.getElementById('traditionalFormat');
            const expression = document.getElementById('expressionFormat');
            const traditionalTypes = document.getElementById('traditionalTypes');
            if (format === 'expression') {
                traditional.style.display = 'none';
                expression.style.display = 'block';
                traditionalTypes.style.display = 'none';
                // 同步注册中心值
                const registryValue = document.getElementById('registry').value;
                document.getElementById('registryExpr').value = registryValue;
            } else {
                traditional.style.display = 'block';
                expression.style.display = 'none';
                traditionalTypes.style.display = 'block';
                // 同步注册中心值
                const registryExprValue = document.getElementById('registryExpr').value;
                document.getElementById('registry').value = registryExprValue;
            }
        }
        function parseExpression(expr) {
            const parenIndex = expr.indexOf('(');
            if (parenIndex === -1) return null;
            const methodPart = expr.substring(0, parenIndex);
            const lastDotIndex = methodPart.lastIndexOf('.');
            if (lastDotIndex === -1) return null;
            const serviceName = methodPart.substring(0, lastDotIndex);
            const methodName = methodPart.substring(lastDotIndex + 1);
            let paramsPart = expr.substring(parenIndex + 1);
            if (paramsPart.endsWith(')')) {
                paramsPart = paramsPart.substring(0, paramsPart.length - 1);
            }
            let parameters = [];
            if (paramsPart.trim()) {
                try {
                    if (paramsPart.trim().startsWith('[')) {
                        parameters = JSON.parse(paramsPart);
                    } else {
                        parameters = [paramsPart.trim()];
                        try {
                            const parsed = JSON.parse(paramsPart.trim());
                            parameters = [parsed];
                        } catch (e) {}
                    }
                } catch (e) {
                    parameters = [paramsPart.trim()];
                }
            }
            return { serviceName, methodName, parameters };
        }
        function invokeService() {
            const format = document.getElementById('callFormat').value;
            let serviceName, methodName, parameters;
            if (format === 'expression') {
                const expr = document.getElementById('expression').value.trim();
                if (!expr) { alert('请输入调用表达式'); return; }
                const parsed = parseExpression(expr);
                if (!parsed) { alert('无效的表达式格式'); return; }
                serviceName = parsed.serviceName;
                methodName = parsed.methodName;
                parameters = parsed.parameters;
            } else {
                serviceName = document.getElementById('serviceName').value.trim();
                methodName = document.getElementById('methodName').value.trim();
                const paramsText = document.getElementById('parameters').value.trim();
                if (!serviceName || !methodName) { alert('请输入服务名和方法名'); return; }
                try {
                    // 直接传递参数字符串，避免JavaScript精度丢失
                    parameters = paramsText || "[]";
                } catch (e) { alert('参数格式错误，请使用JSON数组格式'); return; }
            }
            const types = format === 'traditional' ? document.getElementById('types').value.trim() : '';
            const registry = format === 'expression' ? 
                document.getElementById('registryExpr').value.trim() : 
                document.getElementById('registry').value.trim();
            const request = {
                serviceName: serviceName, methodName: methodName,
                parameters: parameters,
                types: types ? types.split(',').map(t => t.trim()) : [],
                registry: registry, app: '{{.App}}', timeout: 10000
            };
            showLoading(true);
            const startTime = Date.now(); // 记录前端调用开始时间
            fetch('/api/invoke', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(request)
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    // 对于错误响应，直接返回文本内容
                    return response.text().then(text => ({
                        success: false,
                        error: text
                    }));
                }
            })
            .then(data => { 
                showLoading(false); 
                const totalTime = Date.now() - startTime; // 计算总耗时
                data.totalTime = totalTime; // 添加总耗时到响应数据
                displayResult(data); 
            })
            .catch(error => {
                showLoading(false);
                const totalTime = Date.now() - startTime;
                displayResult({ success: false, error: '网络错误: ' + error.message, totalTime: totalTime });
            });
        }
        function generateExample() {
            const types = document.getElementById('types').value.trim();
            if (!types) { alert('请先输入参数类型'); return; }
            fetch('/api/example?types=' + encodeURIComponent(types))
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const currentFormat = document.getElementById('callFormat').value;
                    if (currentFormat === 'expression') {
                        const serviceName = 'com.example.Service';
                        const methodName = 'exampleMethod';
                        const params = data.examples.join(', ');
                        document.getElementById('expression').value = serviceName + '.' + methodName + '(' + params + ')';
                    } else {
                        document.getElementById('parameters').value = JSON.stringify(data.examples, null, 2);
                    }
                } else { alert('生成示例失败: ' + data.error); }
            })
            .catch(error => { alert('生成示例失败: ' + error.message); });
        }
        function testConnection() {
            const currentFormat = document.getElementById('callFormat').value;
            const registry = currentFormat === 'expression' ? 
                document.getElementById('registryExpr').value.trim() : 
                document.getElementById('registry').value.trim();
            
            if (!registry) {
                alert('请先输入注册中心地址');
                return;
            }
            
            // 显示测试中状态
            const serviceList = document.getElementById('serviceList');
            serviceList.innerHTML = '<div style="padding: 20px; text-align: center; color: #6c757d;">🔗 正在测试连接...</div>';
            
            fetch('/api/test-connection?registry=' + encodeURIComponent(registry) + '&app={{.App}}&timeout=10000')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('✅ 连接成功！');
                    // 连接成功后自动加载服务列表
                    loadServices();
                } else {
                    alert('❌ 连接失败: ' + data.error);
                    serviceList.innerHTML = '<div style="padding: 20px; text-align: center; color: #dc3545;">连接失败: ' + data.error + '</div>';
                }
            })
            .catch(error => {
                alert('❌ 连接测试失败: ' + error.message);
                serviceList.innerHTML = '<div style="padding: 20px; text-align: center; color: #dc3545;">网络错误: ' + error.message + '</div>';
            });
        }
        function loadServices() {
            const currentFormat = document.getElementById('callFormat').value;
            const registry = currentFormat === 'expression' ? 
                document.getElementById('registryExpr').value.trim() : 
                document.getElementById('registry').value.trim();
            
            if (!registry) {
                document.getElementById('serviceList').innerHTML = 
                    '<div style="padding: 20px; text-align: center; color: #6c757d;">请先配置注册中心</div>';
                return;
            }
            
            fetch('/api/list?registry=' + encodeURIComponent(registry) + '&app={{.App}}&timeout=10000')
            .then(response => response.json())
            .then(data => {
                if (data.success) { displayServices(data.services); }
                else { 
                    document.getElementById('serviceList').innerHTML = 
                        '<div style="padding: 20px; text-align: center; color: #dc3545;">连接注册中心失败: ' + data.error + '</div>';
                }
            })
            .catch(error => { 
                document.getElementById('serviceList').innerHTML = 
                    '<div style="padding: 20px; text-align: center; color: #dc3545;">网络错误: ' + error.message + '</div>';
            });
        }
        function displayServices(services) {
            const serviceList = document.getElementById('serviceList');
            serviceList.innerHTML = '';
            
            if (!services || services.length === 0) {
                serviceList.innerHTML = '<div style="padding: 20px; text-align: center; color: #6c757d;"><i>暂无可用服务</i></div>';
                return;
            }
            
            services.forEach(service => {
                const item = document.createElement('div');
                item.className = 'service-item';
                
                // 尝试提取包名和服务名
                const parts = service.split('.');
                const serviceName = parts.pop();
                const packageName = parts.join('.');
                
                if (packageName) {
                    item.innerHTML = 
                        '<div style="font-weight: 500; color: #3949ab;">' + serviceName + '</div>' +
                        '<div style="font-size: 0.8em; margin-top: 3px; color: #5f6368;">' + packageName + '</div>';
                } else {
                    item.textContent = service;
                }
                
                item.onclick = () => {
                    document.getElementById('serviceName').value = service;
                    loadMethods(service);
                };
                serviceList.appendChild(item);
            });
        }
        function loadMethods(serviceName) {
            const currentFormat = document.getElementById('callFormat').value;
            const registry = currentFormat === 'expression' ? 
                document.getElementById('registryExpr').value.trim() : 
                document.getElementById('registry').value.trim();
            
            if (!registry || !serviceName) {
                return;
            }
            
            fetch('/api/methods?serviceName=' + encodeURIComponent(serviceName) + '&registry=' + encodeURIComponent(registry) + '&app={{.App}}&timeout=10000')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    setupMethodDropdown(data.methods);
                } else {
                    console.log('获取方法列表失败: ' + data.error);
                }
            })
            .catch(error => {
                console.log('获取方法列表失败: ' + error.message);
            });
        }
        function setupMethodDropdown(methods) {
            const methodInput = document.getElementById('methodName');
            const existingDatalist = document.getElementById('methodDatalist');
            if (existingDatalist) {
                existingDatalist.remove();
            }
            
            if (methods && methods.length > 0) {
                const datalist = document.createElement('datalist');
                datalist.id = 'methodDatalist';
                methods.forEach(method => {
                    const option = document.createElement('option');
                    option.value = method;
                    datalist.appendChild(option);
                });
                methodInput.setAttribute('list', 'methodDatalist');
                methodInput.parentNode.appendChild(datalist);
                
                // 如果只有一个方法，自动填充
                if (methods.length === 1) {
                    methodInput.value = methods[0];
                }
            } else {
                methodInput.removeAttribute('list');
            }
        }
        function showLoading(show) {
            const loading = document.getElementById('loading');
            const result = document.getElementById('result');
            if (show) {
                loading.style.display = 'block';
                result.style.display = 'none';
            } else {
                loading.style.display = 'none';
                result.style.display = 'block';
            }
        }
        function displayResult(data) {
            const result = document.getElementById('result');
            result.className = 'result ' + (data.success ? 'success' : 'error');
            
            // 如果是成功调用，显示data字段的内容；如果是失败，显示error信息
            if (data.success && data.data !== undefined) {
                // 格式化显示数据，提供优雅的输出格式
                if (typeof data.data === 'string') {
                    try {
                        // 如果是JSON字符串，尝试解析并格式化
                        const parsed = JSON.parse(data.data, function(key, value) {
                            // 检查是否为大整数（超过JavaScript安全整数范围）
                            if (typeof value === 'number' && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {
                                return value.toString();
                            }
                            return value;
                        });
                        result.textContent = JSON.stringify(parsed, null, 2);
                    } catch (e) {
                        // 如果不是JSON字符串，直接显示
                        result.textContent = data.data;
                    }
                } else if (typeof data.data === 'object' && data.data !== null) {
                    // 如果是对象或数组，格式化显示
                    result.textContent = JSON.stringify(data.data, null, 2);
                } else {
                    // 如果是基础数据类型（数字、布尔值、null等），直接显示
                    result.textContent = String(data.data);
                }
            } else if (!data.success && data.error) {
                result.textContent = data.error;
            } else {
                // 兼容旧格式或其他情况
                result.textContent = JSON.stringify(data, null, 2);
            }
            
            // 更新结果面板标题的状态指示器
            const resultPanelTitle = document.querySelector('.result-panel h2');
            if (resultPanelTitle) {
                const statusIndicator = data.success ? 
                    '<span style="color: #4caf50; margin-left: 8px;">●</span>' : 
                    '<span style="color: #f44336; margin-left: 8px;">●</span>';
                const statusText = data.success ? '调用成功' : '调用失败';
                
                // 构建耗时信息
                let timeInfo = '';
                if (data.totalTime) {
                    timeInfo += ' (总耗时: ' + data.totalTime + 'ms';
                    if (data.duration) {
                        timeInfo += ', 后端: ' + data.duration + 'ms';
                    }
                    timeInfo += ')';
                } else if (data.duration) {
                    timeInfo += ' (后端耗时: ' + data.duration + 'ms)';
                }
                
                resultPanelTitle.innerHTML = '调用结果 - ' + statusText + timeInfo + statusIndicator;
            }
            
            // 调用后自动刷新历史（无论成功失败）
            setTimeout(loadHistory, 500);
        }
        function downloadHistory() {
            fetch('/api/history')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.history) {
                    const blob = new Blob([JSON.stringify(data.history, null, 2)], 
                        { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'dubbo-invoke-history-' + new Date().toISOString().slice(0,19).replace(/:/g, '-') + '.json';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                } else {
                    alert('下载失败: ' + (data.error || '无历史数据'));
                }
            })
            .catch(error => { alert('下载失败: ' + error.message); });
        }
        function clearHistory() {
            if (confirm('确定要清空所有历史记录吗？此操作不可恢复。')) {
                fetch('/api/clear-history', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('历史记录已清空');
                        loadHistory(); // 重新加载历史记录
                    } else {
                        alert('清空失败: ' + (data.error || '未知错误'));
                    }
                })
                .catch(error => { alert('清空失败: ' + error.message); });
            }
        }
        function loadHistory() {
            fetch('/api/history')
            .then(response => response.json())
            .then(data => {
                if (data.success) { displayHistory(data.history); }
                else { alert('加载历史记录失败: ' + data.error); }
            })
            .catch(error => { alert('加载历史记录失败: ' + error.message); });
        }
        function displayHistory(history) {
            const historyList = document.getElementById('historyList');
            historyList.innerHTML = '';
            if (!history || history.length === 0) {
                historyList.innerHTML = '<div style="padding: 20px; text-align: center; color: #6c757d;"><i>暂无调用历史</i></div>';
                return;
            }
            // 按时间倒序显示最近的记录
            history.reverse().forEach(item => {
                const historyItem = document.createElement('div');
                historyItem.className = 'service-item';
                const timestamp = new Date(item.timestamp).toLocaleString();
                const status = item.success ? '✅' : '❌';
                const statusClass = item.success ? 'success-text' : 'error-text';
                const fullServiceName = item.serviceName + '.' + item.methodName;
                
                // 处理参数显示，限制长度并添加滚动
                let paramDisplay = '';
                if (item.parameters) {
                    let paramText = '';
                    if (Array.isArray(item.parameters)) {
                        // 数组格式的参数，转换为字符串显示
                        paramText = JSON.stringify(item.parameters);
                    } else if (typeof item.parameters === 'string' && item.parameters.trim() !== '') {
                        // 兼容旧的字符串格式
                        paramText = item.parameters;
                    }
                    
                    if (paramText && paramText.length > 15) {
                        paramDisplay = '<div style="font-size: 0.75em; margin-top: 2px; color: #9aa0a6; max-width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; word-break: break-all;" title="' + paramText.replace(/"/g, '&quot;') + '">' +
                            paramText.substring(0, 15) + '...' +
                        '</div>';
                    } else if (paramText) {
                        paramDisplay = '<div style="font-size: 0.75em; margin-top: 2px; color: #9aa0a6; word-break: break-all; max-width: 100%;">' + paramText + '</div>';
                    } else {
                        paramDisplay = '<div style="font-size: 0.75em; margin-top: 2px; color: #9aa0a6;">无参数</div>';
                    }
                } else {
                    paramDisplay = '<div style="font-size: 0.75em; margin-top: 2px; color: #9aa0a6;">无参数</div>';
                }
                
                historyItem.innerHTML = 
                    '<div class="service-name" style="max-width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; word-break: break-all;" title="' + fullServiceName + '">' + fullServiceName + '</div>' +
                    '<div style="font-size: 0.8em; margin-top: 3px; color: #5f6368; max-width: 100%; word-break: break-all;">' +
                        '<span class="' + statusClass + '">' + status + '</span> ' + timestamp +
                    '</div>' +
                    paramDisplay;
                historyItem.onclick = () => fillFromHistory(item);
                historyList.appendChild(historyItem);
            });

            // 添加样式
            const style = document.createElement('style');
            style.textContent = 
                '.success-text { color: #43a047; }' +
                '.error-text { color: #e53935; }';
            document.head.appendChild(style);
        }
        function fillFromHistory(item) {
            // 填充表单字段
            document.getElementById('serviceName').value = item.serviceName || '';
            document.getElementById('methodName').value = item.methodName || '';
            
            // 处理参数：parameters现在是数组格式
            if (item.parameters) {
                if (Array.isArray(item.parameters)) {
                    // 直接处理数组格式的参数
                    document.getElementById('parameters').value = JSON.stringify(item.parameters);
                } else {
                    // 兼容旧的字符串格式
                    try {
                        const parsed = JSON.parse(item.parameters);
                        if (Array.isArray(parsed)) {
                            document.getElementById('parameters').value = JSON.stringify(parsed);
                        } else {
                            document.getElementById('parameters').value = item.parameters;
                        }
                    } catch (e) {
                        document.getElementById('parameters').value = item.parameters;
                    }
                }
            } else {
                document.getElementById('parameters').value = '';
            }
            
            // 处理参数类型
            if (item.types) {
                if (Array.isArray(item.types)) {
                    document.getElementById('types').value = item.types.join(', ');
                } else {
                    try {
                        const parsed = JSON.parse(item.types);
                        if (Array.isArray(parsed)) {
                            document.getElementById('types').value = parsed.join(', ');
                        } else {
                            document.getElementById('types').value = item.types;
                        }
                    } catch (e) {
                        document.getElementById('types').value = item.types;
                    }
                }
            } else {
                document.getElementById('types').value = '';
            }
            
            // 填充注册中心地址
            document.getElementById('registry').value = item.registry || '';
            
            // 填充调用结果
            if (item.result) {
                const resultElement = document.getElementById('result');
                if (resultElement) {
                    // 智能格式化结果数据
                    try {
                        // 尝试解析为JSON并美化显示
                        let resultData = item.result;
                        
                        // 处理双重转义的JSON字符串
                        if (typeof resultData === 'string' && resultData.startsWith('"') && resultData.endsWith('"')) {
                            try {
                                // 先解析一次去掉外层引号和转义
                                resultData = JSON.parse(resultData);
                            } catch (e) {
                                // 如果解析失败，保持原样
                            }
                        }
                        
                        // 再次尝试解析为JSON对象，使用reviver保持大整数精度
                        const parsed = JSON.parse(resultData, function(key, value) {
                            // 检查是否为大整数（超过JavaScript安全整数范围）
                            if (typeof value === 'number' && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {
                                return value.toString();
                            }
                            return value;
                        });
                        resultElement.textContent = JSON.stringify(parsed, null, 2);
                    } catch (e) {
                        // 如果不是JSON格式，直接显示原内容
                        resultElement.textContent = item.result;
                    }
                    resultElement.className = 'result ' + (item.success ? 'success' : 'error');
                    
                    // 更新结果面板标题
                    const resultPanelTitle = document.querySelector('.result-panel h2');
                    if (resultPanelTitle) {
                        const statusIndicator = item.success ? 
                            '<span style="color: #4caf50; margin-left: 8px;">●</span>' : 
                            '<span style="color: #f44336; margin-left: 8px;">●</span>';
                        const statusText = item.success ? '调用成功' : '调用失败';
                        resultPanelTitle.innerHTML = '调用结果 - ' + statusText + statusIndicator;
                    }
                }
            }
            
            // 切换到传统格式
            document.getElementById('callFormat').value = 'traditional';
            toggleCallFormat();
            
            // 重新设置注册中心地址（因为toggleCallFormat可能会重置它）
            document.getElementById('registry').value = item.registry || '';
        }
        window.onload = function() { loadHistory(); };
    </script>
</body>
</html>`
